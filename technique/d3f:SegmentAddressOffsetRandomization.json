{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","kb-article":"d3f:kb-article","definition":"d3f:definition","kb-reference":{"@id":"d3f:kb-reference","@container":"@set"}},"@graph":[{"@id":"_:b0"},{"@id":"d3f:ApplicationHardening"},{"@id":"d3f:Harden"},{"@id":"d3f:ProcessSegment"},{"@id":"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs"},{"@id":"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld"},{"@id":"d3f:SegmentAddressOffsetRandomization","@type":["d3f:ApplicationHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:d3fend-id":"D3-SAOR","definition":"Randomizing the base (start) address of one or more segments of memory during the initialization of a process.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How it works\n\nMany application exploits rely on an attacker specifying a location in memory, which points to data or code used by the attacker.  If the addresses are changed each time the program is run, then it becomes more difficult for the attacker to determine the location that will contain the code they wish to run.\n\nImported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing.\"  Just as not all code is built for participation in ASLR, not all modules can be rebased; instead, modules must indicate whether they implement support for rebasing.  Such information to relocate the executable is typically stored in the \".reloc\" segment -- each of the addresses pointed to in this segment has its address increased by the amount of the offset.\n(An alternative method for relocation would be to add an amount to a global variable each time -- leading to less overhead in the module load, but more for each access.  Still another implementation could instead contain code to deference each changeable memory location on the fly, so that each of the references do not need to be updated.\n\n\n## Considerations\n\nAs the offset for each segment is constant, it is possible to guess at the value of the address given the address of another variable.  Alternatively, memory pointers may be kept around, which contain the address of another variable.\nAnother bypass technique is known as an \"egg hunt,\" whereby the attacker searches for a rather unique piece of the data or code in memory to determine its likely address.\n\nThe program needs to store these addresses for the functions somewhere.  In Linux, the PLT contains a \"trampoline\" to these addresses.  If an attacker desires to jump to the start of an existing function, they can jump directly to the trampoline anyway, and may have the opportunity to provide their own stack frame to the function with a write to the stack. If they overwrite a saved stack pointer which is loaded back into memory, or execute a function, that changes the address of a stack pointer.\n\nIf an attacker wants to inject some data into the program, for example as a parameter to a known function that is not under ASLR or a pointer to a trampoline function in the PLT, then they can repeat the data until they exceed the range of ASLR coverage, which on 32-bit systems is accomplishable in a few seconds with a heap spray.  Microsoft's EMET and Windows 10 Exploit Guard can pre-allocate particular addresses that are commonly used in heap sprays.  However, in many products, there does not seem to be nearly a complete coverage of such addresses, which only need to be executable and in the range of the heap; 0x0c0c0c0c is such an address that is commonly used for the x86 processor architecture, as when executed it only performs a numeric operation to a register four times.","kb-reference":[{"@id":"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs"},{"@id":"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld"}],"d3f:obfuscates":{"@id":"d3f:ProcessSegment"},"rdfs:label":"Segment Address Offset Randomization","rdfs:subClassOf":[{"@id":"d3f:ApplicationHardening"},{"@id":"_:b0"}]}],"_:b0":{"@id":"_:b0"},"d3f:ApplicationHardening":{"@id":"d3f:ApplicationHardening"},"d3f:Harden":{"@id":"d3f:Harden"},"d3f:ProcessSegment":{"@id":"d3f:ProcessSegment"},"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs":{"@id":"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs"},"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld":{"@id":"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld"},"d3f:SegmentAddressOffsetRandomization":{"@id":"d3f:SegmentAddressOffsetRandomization","@type":["d3f:ApplicationHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:d3fend-id":"D3-SAOR","definition":"Randomizing the base (start) address of one or more segments of memory during the initialization of a process.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How it works\n\nMany application exploits rely on an attacker specifying a location in memory, which points to data or code used by the attacker.  If the addresses are changed each time the program is run, then it becomes more difficult for the attacker to determine the location that will contain the code they wish to run.\n\nImported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing.\"  Just as not all code is built for participation in ASLR, not all modules can be rebased; instead, modules must indicate whether they implement support for rebasing.  Such information to relocate the executable is typically stored in the \".reloc\" segment -- each of the addresses pointed to in this segment has its address increased by the amount of the offset.\n(An alternative method for relocation would be to add an amount to a global variable each time -- leading to less overhead in the module load, but more for each access.  Still another implementation could instead contain code to deference each changeable memory location on the fly, so that each of the references do not need to be updated.\n\n\n## Considerations\n\nAs the offset for each segment is constant, it is possible to guess at the value of the address given the address of another variable.  Alternatively, memory pointers may be kept around, which contain the address of another variable.\nAnother bypass technique is known as an \"egg hunt,\" whereby the attacker searches for a rather unique piece of the data or code in memory to determine its likely address.\n\nThe program needs to store these addresses for the functions somewhere.  In Linux, the PLT contains a \"trampoline\" to these addresses.  If an attacker desires to jump to the start of an existing function, they can jump directly to the trampoline anyway, and may have the opportunity to provide their own stack frame to the function with a write to the stack. If they overwrite a saved stack pointer which is loaded back into memory, or execute a function, that changes the address of a stack pointer.\n\nIf an attacker wants to inject some data into the program, for example as a parameter to a known function that is not under ASLR or a pointer to a trampoline function in the PLT, then they can repeat the data until they exceed the range of ASLR coverage, which on 32-bit systems is accomplishable in a few seconds with a heap spray.  Microsoft's EMET and Windows 10 Exploit Guard can pre-allocate particular addresses that are commonly used in heap sprays.  However, in many products, there does not seem to be nearly a complete coverage of such addresses, which only need to be executable and in the range of the heap; 0x0c0c0c0c is such an address that is commonly used for the x86 processor architecture, as when executed it only performs a numeric operation to a register four times.","kb-reference":[{"@id":"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs"},{"@id":"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld"}],"d3f:obfuscates":{"@id":"d3f:ProcessSegment"},"rdfs:label":"Segment Address Offset Randomization","rdfs:subClassOf":[{"@id":"d3f:ApplicationHardening"},{"@id":"_:b0"}]},"name":"d3f:SegmentAddressOffsetRandomization","related_offensive_matrix":{"Defense Evasion":[["Process Injection",[{"otech_parent_string":{"type":"literal","value":"Process Injection"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"false"},"otech_string":{"type":"literal","value":"Process Hollowing"},"otech_id":{"type":"literal","value":"T1055.012"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#DefenseEvasion"},"otactic_string":{"type":"literal","value":"Defense Evasion"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1055.012"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]],["Exploitation for Defense Evasion",[{"otech_parent_string":{"type":"literal","value":"Defense Evasion Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation for Defense Evasion"},"otech_id":{"type":"literal","value":"T1211"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#DefenseEvasion"},"otactic_string":{"type":"literal","value":"Defense Evasion"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1211"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Privilege Escalation":[["Process Injection",[{"otech_parent_string":{"type":"literal","value":"Process Injection"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"false"},"otech_string":{"type":"literal","value":"Process Hollowing"},"otech_id":{"type":"literal","value":"T1055.012"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#PrivilegeEscalation"},"otactic_string":{"type":"literal","value":"Privilege Escalation"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1055.012"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]],["Exploitation for Privilege Escalation",[{"otech_parent_string":{"type":"literal","value":"Privilege Escalation Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation for Privilege Escalation"},"otech_id":{"type":"literal","value":"T1068"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#PrivilegeEscalation"},"otactic_string":{"type":"literal","value":"Privilege Escalation"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1068"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Collection":[["Input Capture",[{"otech_parent_string":{"type":"literal","value":"Input Capture"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"false"},"otech_string":{"type":"literal","value":"Credential API Hooking"},"otech_id":{"type":"literal","value":"T1056.004"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Collection"},"otactic_string":{"type":"literal","value":"Collection"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1056.004"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Credential Access":[["Input Capture",[{"otech_parent_string":{"type":"literal","value":"Input Capture"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"false"},"otech_string":{"type":"literal","value":"Credential API Hooking"},"otech_id":{"type":"literal","value":"T1056.004"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#CredentialAccess"},"otactic_string":{"type":"literal","value":"Credential Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1056.004"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]],["Exploitation for Credential Access",[{"otech_parent_string":{"type":"literal","value":"Credential Access Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation for Credential Access"},"otech_id":{"type":"literal","value":"T1212"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#CredentialAccess"},"otactic_string":{"type":"literal","value":"Credential Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1212"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Initial Access":[["Drive-by Compromise",[{"otech_parent_string":{"type":"literal","value":"Initial Access Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Drive-by Compromise"},"otech_id":{"type":"literal","value":"T1189"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#InitialAccess"},"otactic_string":{"type":"literal","value":"Initial Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1189"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]],["Exploit Public-Facing Application",[{"otech_parent_string":{"type":"literal","value":"Initial Access Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploit Public-Facing Application"},"otech_id":{"type":"literal","value":"T1190"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#InitialAccess"},"otactic_string":{"type":"literal","value":"Initial Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1190"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Execution":[["Exploitation for Client Execution",[{"otech_parent_string":{"type":"literal","value":"Execution Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation for Client Execution"},"otech_id":{"type":"literal","value":"T1203"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Execution"},"otactic_string":{"type":"literal","value":"Execution"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1203"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#modifies"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]],"Lateral Movement":[["Exploitation of Remote Services",[{"otech_parent_string":{"type":"literal","value":"Lateral Movement Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation of Remote Services"},"otech_id":{"type":"literal","value":"T1210"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#LateralMovement"},"otactic_string":{"type":"literal","value":"Lateral Movement"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1210"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}},{"otech_parent_string":{"type":"literal","value":"Lateral Movement Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploitation of Remote Services"},"otech_id":{"type":"literal","value":"T1210"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#LateralMovement"},"otactic_string":{"type":"literal","value":"Lateral Movement"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1210"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-modify"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegment"},"o_digital_artifact_string":{"type":"literal","value":"Process Code Segment"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"d_digital_artifact_string":{"type":"literal","value":"Process Segment"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]]},"digital_artifacts":{"head":{"vars":["relationship","relationship_label","relationship_comment","digital_artifact","digital_artifact_label","digital_artifact_comment"]},"results":{"bindings":[{"relationship":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#obfuscates"},"relationship_label":{"type":"literal","value":"obfuscates"},"relationship_comment":{"type":"literal","value":"x obfuscates y: The technique x makes the digital artifact y difficult .  Typically obfuscation is a way to hide a digital artifact from discovery, use, or both."},"digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessSegment"},"digital_artifact_label":{"type":"literal","value":"Process Segment"},"digital_artifact_comment":{"type":"literal","value":"Process segments are distinct partitions of the memory space of a running process.  Heap, data, code, and stack segments are examples of process segments."}}]}},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference_/DYNAMICBASE(UseAddressSpaceLayoutRandomization)_MicrosoftDocs","@type":["d3f:UserManualReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?view=vs-2019"},"d3f:kb-author":"Microsoft","d3f:kb-is-example-of":{"@id":"d3f:SegmentAddressOffsetRandomization"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"Microsoft","d3f:kb-reference-title":"/DYNAMICBASE (Use address space layout randomization)","d3f:reference-type-label":"User Manual","rdfs:label":"Reference - /DYNAMICBASE (Use address space layout randomization) - Microsoft Docs"},{"@id":"d3f:Reference_HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld","@type":["d3f:InternetArticleReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://www.networkworld.com/article/3331199/what-does-aslr-do-for-linux.html"},"d3f:kb-abstract":"ASLR (Address Space Layout Randomization) is a memory exploitation mitigation technique used on both Linux and Windows systems. Learn how to tell if it's running, enable/disable it, and get a view of how it works.","d3f:kb-author":"Sandra Henry-Stocker","d3f:kb-is-example-of":{"@id":"d3f:SegmentAddressOffsetRandomization"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"Network World","d3f:kb-reference-title":"How ASLR protects Linux systems from buffer overflow attacks","d3f:reference-type-label":"Internet Article","rdfs:label":"Reference - How ASLR protects Linux systems from buffer overflow attacks - Network World"}]},"references_meta":{"User Manual":1,"Internet Article":1}}