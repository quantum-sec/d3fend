{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","kb-article":"d3f:kb-article","definition":"d3f:definition","kb-reference":{"@id":"d3f:kb-reference","@container":"@set"}},"@graph":[{"@id":"_:b0"},{"@id":"d3f:ApplicationHardening"},{"@id":"d3f:ExceptionHandlerPointerValidation","@type":["d3f:ApplicationHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:d3fend-id":"D3-EHPV","definition":"Validates that a referenced exception handler pointer is a valid exception handler.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How It Works\nWhen a process encounters an exception, it calls an exception handler to deal with the exception.  The method by which this exception handler is determined varies by the operating system.  The exception handler is called, even if it is the default exception handler to terminate the program and display a message that the program stopped working.  In the case that no valid exception handler is found, the program would fail to proceed as normal and could be programmed to terminate.\n\nIn Windows, the address of the exception registration record is stored at the very start of the the Thread Information Block; the GS register points to this structure.\n\nThe exception registration record contains two pointers: a pointer to the next exception registration record should this handler fail to handle the exception, and a pointer to the handler.\n\nA buffer overflow can overwrite the saved return pointer with an invalid location to execute memory; this often triggers the exception handler chain, which could also be corrupted by the buffer overflow.  Although Process Exception Handler Validation does not make sure that the exception handler pointer or the code at the exception handler was unaltered, or that the exception handler code is secure, this technique does ensure that the pointer is at least an exception handler that could be called by the program.\n\nWith Process Exception Handler Validation, before the handler is called, it checks the exception handler against a source of valid exception handlers.  If the requested handler is not in this list, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.\n\n### Runtime valid exception handler source generation\nThe source of valid exception handlers could be generated at runtime, with the risk of the information that is used to determine the validity of exception handlers being compromised.  \n\n### Compile-time\nThe source of valid exception handlers could also be generated at compile time or as a binary patch.  Given the source code, it would be rather straightforward to find the exceptions, as they are pointed in the catch statement of a try-catch clause and the compiler must already generate the code to call exceptions from this.\n\n## Considerations\nIf the program file can be altered by the attacker, then the security could be bypassed by replacing it with any desired program, without even bypassing SEH.\n\nIf the attacker was already able to overwrite the code for a valid exception handler via other functionality in the program, this defense would not prevent arbitrary code execution.\nIf an exception handler recognized as valid is vulnerable, it would be executed anyway.\n\nSafeSEH might be applied only to some executable files or modules, allowing an attacker to call any piece of code as an exception handler in the unprotected modules.","kb-reference":[{"@id":"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs"}],"d3f:synonym":"Exception Handler Validation","d3f:validates":{"@id":"d3f:Pointer"},"rdfs:label":"Exception Handler Pointer Validation","rdfs:subClassOf":[{"@id":"d3f:ApplicationHardening"},{"@id":"_:b0"}]},{"@id":"d3f:Harden"},{"@id":"d3f:Pointer"},{"@id":"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs"}],"_:b0":{"@id":"_:b0"},"d3f:ApplicationHardening":{"@id":"d3f:ApplicationHardening"},"d3f:ExceptionHandlerPointerValidation":{"@id":"d3f:ExceptionHandlerPointerValidation","@type":["d3f:ApplicationHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:d3fend-id":"D3-EHPV","definition":"Validates that a referenced exception handler pointer is a valid exception handler.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How It Works\nWhen a process encounters an exception, it calls an exception handler to deal with the exception.  The method by which this exception handler is determined varies by the operating system.  The exception handler is called, even if it is the default exception handler to terminate the program and display a message that the program stopped working.  In the case that no valid exception handler is found, the program would fail to proceed as normal and could be programmed to terminate.\n\nIn Windows, the address of the exception registration record is stored at the very start of the the Thread Information Block; the GS register points to this structure.\n\nThe exception registration record contains two pointers: a pointer to the next exception registration record should this handler fail to handle the exception, and a pointer to the handler.\n\nA buffer overflow can overwrite the saved return pointer with an invalid location to execute memory; this often triggers the exception handler chain, which could also be corrupted by the buffer overflow.  Although Process Exception Handler Validation does not make sure that the exception handler pointer or the code at the exception handler was unaltered, or that the exception handler code is secure, this technique does ensure that the pointer is at least an exception handler that could be called by the program.\n\nWith Process Exception Handler Validation, before the handler is called, it checks the exception handler against a source of valid exception handlers.  If the requested handler is not in this list, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.\n\n### Runtime valid exception handler source generation\nThe source of valid exception handlers could be generated at runtime, with the risk of the information that is used to determine the validity of exception handlers being compromised.  \n\n### Compile-time\nThe source of valid exception handlers could also be generated at compile time or as a binary patch.  Given the source code, it would be rather straightforward to find the exceptions, as they are pointed in the catch statement of a try-catch clause and the compiler must already generate the code to call exceptions from this.\n\n## Considerations\nIf the program file can be altered by the attacker, then the security could be bypassed by replacing it with any desired program, without even bypassing SEH.\n\nIf the attacker was already able to overwrite the code for a valid exception handler via other functionality in the program, this defense would not prevent arbitrary code execution.\nIf an exception handler recognized as valid is vulnerable, it would be executed anyway.\n\nSafeSEH might be applied only to some executable files or modules, allowing an attacker to call any piece of code as an exception handler in the unprotected modules.","kb-reference":[{"@id":"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs"}],"d3f:synonym":"Exception Handler Validation","d3f:validates":{"@id":"d3f:Pointer"},"rdfs:label":"Exception Handler Pointer Validation","rdfs:subClassOf":[{"@id":"d3f:ApplicationHardening"},{"@id":"_:b0"}]},"d3f:Harden":{"@id":"d3f:Harden"},"d3f:Pointer":{"@id":"d3f:Pointer"},"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs":{"@id":"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs"},"name":"d3f:ExceptionHandlerPointerValidation","related_offensive_matrix":{},"digital_artifacts":{"head":{"vars":["relationship","relationship_label","relationship_comment","digital_artifact","digital_artifact_label","digital_artifact_comment"]},"results":{"bindings":[{"relationship":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#validates"},"relationship_label":{"type":"literal","value":"validates"},"relationship_comment":{"type":"literal","value":"x validates y: The technique x proves the digital artifact y is valid; that is, x shows or confirms the validity of y."},"digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Pointer"},"digital_artifact_label":{"type":"literal","value":"Pointer"},"digital_artifact_comment":{"type":"literal","value":"In computer science, a pointer is a programming language object, whose value refers to (or \"points to\") another value stored elsewhere in the computer memory using its memory address. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer. As an analogy, a page number in a book's index could be considered a pointer to the corresponding page; dereferencing such a pointer would be done by flipping to the page with the given page number."}}]}},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference_/SAFESEH(ImageHasSafeExceptionHandlers)_MicrosoftDocs","@type":["d3f:UserManualReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers?view=msvc-160"},"d3f:kb-abstract":"When /SAFESEH is specified, the linker will only produce an image if it can also produce a table of the image's safe exception handlers. This table specifies for the operating system which exception handlers are valid for the image.","d3f:kb-author":"Mike Blome, Saisang Cai, Colin Robertson, Mike Jones, NextTurn, Gordon Hogenson","d3f:kb-is-example-of":{"@id":"d3f:ExceptionHandlerPointerValidation"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"Microsoft","d3f:kb-reference-title":"/SAFESEH (Image has Safe Exception Handlers)","d3f:reference-type-label":"User Manual","rdfs:label":"Reference - /SAFESEH (Image has Safe Exception Handlers) - Microsoft Docs"}]},"references_meta":{"User Manual":1}}