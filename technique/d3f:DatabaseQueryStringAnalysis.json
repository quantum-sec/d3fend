{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","kb-article":"d3f:kb-article","definition":"d3f:definition","kb-reference":{"@id":"d3f:kb-reference","@container":"@set"}},"@graph":[{"@id":"_:b0"},{"@id":"d3f:DatabaseQuery"},{"@id":"d3f:DatabaseQueryStringAnalysis","@type":["d3f:ProcessAnalysis","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:analyzes":{"@id":"d3f:DatabaseQuery"},"d3f:d3fend-id":"D3-DQSA","definition":"Analyzing database queries to detect [SQL Injection](https://capec.mitre.org/data/definitions/66.html).","d3f:enables":{"@id":"d3f:Detect"},"kb-article":"## How it works\n\nSome implementations use software hooks to intercept function calls related to database query operations. Other implementations might intercept or collect network traffic. The database query string is then extracted and analyzed with various methods, for example:\n* Detecting specific administrative SQL commands\n* Anomalous sequences of commands when compared to a statistical baseline.\n* Anomalous commands for a given user role.\n\n## Considerations\n\nSome capabilities sanitize queries before permitting them to be transmitted to the database. This incurs risks such altering data in an undesired way or breaking application functionality.","kb-reference":[{"@id":"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc"}],"rdfs:label":"Database Query String Analysis","rdfs:subClassOf":[{"@id":"d3f:ProcessAnalysis"},{"@id":"_:b0"}]},{"@id":"d3f:Detect"},{"@id":"d3f:ProcessAnalysis"},{"@id":"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc"}],"_:b0":{"@id":"_:b0"},"d3f:DatabaseQuery":{"@id":"d3f:DatabaseQuery"},"d3f:DatabaseQueryStringAnalysis":{"@id":"d3f:DatabaseQueryStringAnalysis","@type":["d3f:ProcessAnalysis","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:analyzes":{"@id":"d3f:DatabaseQuery"},"d3f:d3fend-id":"D3-DQSA","definition":"Analyzing database queries to detect [SQL Injection](https://capec.mitre.org/data/definitions/66.html).","d3f:enables":{"@id":"d3f:Detect"},"kb-article":"## How it works\n\nSome implementations use software hooks to intercept function calls related to database query operations. Other implementations might intercept or collect network traffic. The database query string is then extracted and analyzed with various methods, for example:\n* Detecting specific administrative SQL commands\n* Anomalous sequences of commands when compared to a statistical baseline.\n* Anomalous commands for a given user role.\n\n## Considerations\n\nSome capabilities sanitize queries before permitting them to be transmitted to the database. This incurs risks such altering data in an undesired way or breaking application functionality.","kb-reference":[{"@id":"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc"}],"rdfs:label":"Database Query String Analysis","rdfs:subClassOf":[{"@id":"d3f:ProcessAnalysis"},{"@id":"_:b0"}]},"d3f:Detect":{"@id":"d3f:Detect"},"d3f:ProcessAnalysis":{"@id":"d3f:ProcessAnalysis"},"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc":{"@id":"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc"},"name":"d3f:DatabaseQueryStringAnalysis","related_offensive_matrix":{"Initial Access":[["Exploit Public-Facing Application",[{"otech_parent_string":{"type":"literal","value":"Initial Access Technique"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"true"},"otech_string":{"type":"literal","value":"Exploit Public-Facing Application"},"otech_id":{"type":"literal","value":"T1190"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#InitialAccess"},"otactic_string":{"type":"literal","value":"Initial Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1190"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#injects"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#DatabaseQuery"},"o_digital_artifact_string":{"type":"literal","value":"Database Query"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#DatabaseQuery"},"d_digital_artifact_string":{"type":"literal","value":"Database Query"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Detect"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]]},"digital_artifacts":{"head":{"vars":["relationship","relationship_label","relationship_comment","digital_artifact","digital_artifact_label","digital_artifact_comment"]},"results":{"bindings":[{"relationship":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#analyzes"},"relationship_label":{"type":"literal","value":"analyzes"},"relationship_comment":{"type":"literal","value":"x analyzes y: The subject x break down object y into components or essential features, assessing y by quantitative methods, qualitative methods, or both.  Usually the analysis is done in terms of some model or framework."},"digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#DatabaseQuery"},"digital_artifact_label":{"type":"literal","value":"Database Query"},"digital_artifact_comment":{"type":"literal","value":"A specific query expressed in SQL, SPARQL, or similar language against a database."}}]}},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference_SystemAndMethodForInternetSecurity_CylanceInc","@type":["d3f:PatentReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://patents.google.com/patent/US20120117644A1"},"d3f:kb-abstract":"A computer implemented method for preventing SQL injection attacks comprises intercepting a web request associated with a web service at a first software hook in a first web service execution context, persisting at least a portion of the intercepted web request in a storage location associated with the first software hook and accessible to at least one additional execution context, intercepting a database query generated by at least one web service processing operation at a second software hook associated with the execution of the query, wherein the query is generated in response to the intercepted web request and the second hook retrieves the persisted portion of the intercepted web request, comparing a portion of the persisted portion of the intercepted web request with at least a portion of the intercepted database query, and determining, prior to the query being executed, whether the query corresponds to a potential SQL injection attack.","d3f:kb-author":"Derek A. Soeder","d3f:kb-is-example-of":{"@id":"d3f:DatabaseQueryStringAnalysis"},"d3f:kb-mitre-analysis":"This patent describes a technique for detecting SQL injection attacks. Software hooks are installed in a web service or application to intercept function calls, events, or messages that are passed between software components. Intercepted database queries associated with a web request are analyzed character by character and if it contains a character that would modify the syntax the query is rejected or sanitized. Security rules and policies may also determine rejection. For example, an administrator or developer may implement a rule that rejects any database query that is excessively long or that contains a particular string, such as \"Xp cmdshell\".","d3f:kb-organization":"Cylance Inc","d3f:kb-reference-title":"System and method for internet security","d3f:reference-type-label":"Patent","rdfs:label":"Reference - System and method for internet security - Cylance Inc"}]},"references_meta":{"Patent":1}}