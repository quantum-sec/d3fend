{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","kb-article":"d3f:kb-article","definition":"d3f:definition","kb-reference":{"@id":"d3f:kb-reference","@container":"@set"}},"@graph":[{"@id":"_:b0"},{"@id":"d3f:Detect"},{"@id":"d3f:NetworkTrafficAnalysis"},{"@id":"d3f:RPCNetworkTraffic"},{"@id":"d3f:RPCTrafficAnalysis","@type":["d3f:NetworkTrafficAnalysis","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:analyzes":{"@id":"d3f:RPCNetworkTraffic"},"d3f:d3fend-id":"D3-RTA","definition":"Monitoring the activity of remote procedure calls in communication traffic to establish standard protocol operations and potential attacker activities.","d3f:enables":{"@id":"d3f:Detect"},"kb-article":"## How it works\nA remote procedure call (RPC) enables one computer to execute a specific function on another computer, as if it were a local application process. There are numerous RPC specifications and implementations. RPC capabilities can be abused by attackers in order to achieve a variety of tactical objectives including execution, persistence, initial access, and more. RPC proxies may be used to collect and store RPC traffic. RPCs can occur over network sockets or named pipes.\n\nAnalytics look for unauthorized behavior such as:\n\n* Processes being launched or scheduled remotely\n* System configurations being changed remotely\n* Unauthorized file read activity\n\nExample RPC Protocols:\n\n* DCE/RPC\n* CORBA\n* Open Network Computing Remote Procedure Call\n* D-Bus\n* XML-RPC\n* JSON-RPC\n* SOAP\n* Apache Thrift\n\n## Considerations\n* RPC is widely used in enterprise environments, and significant data filtering may be required in large environments to enable analytic processing.\n* RPC traffic may occur over a pipe, or within a host over loopback interface, thus making network collection difficult.","kb-reference":[{"@id":"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE"},{"@id":"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE"},{"@id":"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE"},{"@id":"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE"},{"@id":"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE"},{"@id":"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other"},{"@id":"d3f:Reference_RPCCallInterception_CrowdstrikeInc"}],"d3f:synonym":"RPC Protocol Analysis","rdfs:label":"RPC Traffic Analysis","rdfs:subClassOf":[{"@id":"d3f:NetworkTrafficAnalysis"},{"@id":"_:b0"}]},{"@id":"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE"},{"@id":"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE"},{"@id":"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE"},{"@id":"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE"},{"@id":"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE"},{"@id":"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other"},{"@id":"d3f:Reference_RPCCallInterception_CrowdstrikeInc"}],"_:b0":{"@id":"_:b0"},"d3f:Detect":{"@id":"d3f:Detect"},"d3f:NetworkTrafficAnalysis":{"@id":"d3f:NetworkTrafficAnalysis"},"d3f:RPCNetworkTraffic":{"@id":"d3f:RPCNetworkTraffic"},"d3f:RPCTrafficAnalysis":{"@id":"d3f:RPCTrafficAnalysis","@type":["d3f:NetworkTrafficAnalysis","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:analyzes":{"@id":"d3f:RPCNetworkTraffic"},"d3f:d3fend-id":"D3-RTA","definition":"Monitoring the activity of remote procedure calls in communication traffic to establish standard protocol operations and potential attacker activities.","d3f:enables":{"@id":"d3f:Detect"},"kb-article":"## How it works\nA remote procedure call (RPC) enables one computer to execute a specific function on another computer, as if it were a local application process. There are numerous RPC specifications and implementations. RPC capabilities can be abused by attackers in order to achieve a variety of tactical objectives including execution, persistence, initial access, and more. RPC proxies may be used to collect and store RPC traffic. RPCs can occur over network sockets or named pipes.\n\nAnalytics look for unauthorized behavior such as:\n\n* Processes being launched or scheduled remotely\n* System configurations being changed remotely\n* Unauthorized file read activity\n\nExample RPC Protocols:\n\n* DCE/RPC\n* CORBA\n* Open Network Computing Remote Procedure Call\n* D-Bus\n* XML-RPC\n* JSON-RPC\n* SOAP\n* Apache Thrift\n\n## Considerations\n* RPC is widely used in enterprise environments, and significant data filtering may be required in large environments to enable analytic processing.\n* RPC traffic may occur over a pipe, or within a host over loopback interface, thus making network collection difficult.","kb-reference":[{"@id":"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE"},{"@id":"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE"},{"@id":"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE"},{"@id":"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE"},{"@id":"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE"},{"@id":"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other"},{"@id":"d3f:Reference_RPCCallInterception_CrowdstrikeInc"}],"d3f:synonym":"RPC Protocol Analysis","rdfs:label":"RPC Traffic Analysis","rdfs:subClassOf":[{"@id":"d3f:NetworkTrafficAnalysis"},{"@id":"_:b0"}]},"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE":{"@id":"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE"},"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE":{"@id":"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE"},"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE":{"@id":"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE"},"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE":{"@id":"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE"},"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE":{"@id":"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE"},"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other":{"@id":"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other"},"d3f:Reference_RPCCallInterception_CrowdstrikeInc":{"@id":"d3f:Reference_RPCCallInterception_CrowdstrikeInc"},"name":"d3f:RPCTrafficAnalysis","related_offensive_matrix":{"Credential Access":[["Steal or Forge Kerberos Tickets",[{"otech_parent_string":{"type":"literal","value":"Steal or Forge Kerberos Tickets"},"otech_parent_is_toplevel":{"datatype":"http://www.w3.org/2001/XMLSchema#boolean","type":"literal","value":"false"},"otech_string":{"type":"literal","value":"Kerberoasting"},"otech_id":{"type":"literal","value":"T1558.003"},"offensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#CredentialAccess"},"otactic_string":{"type":"literal","value":"Credential Access"},"offensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"offensive_technique":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#T1558.003"},"offensive_artifact_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#may-produce"},"o_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#RPCNetworkTraffic"},"o_digital_artifact_string":{"type":"literal","value":"RPC Network Traffic"},"d_digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#RPCNetworkTraffic"},"d_digital_artifact_string":{"type":"literal","value":"RPC Network Traffic"},"defensive_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Detect"},"defensive_verb":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"}}]]]},"digital_artifacts":{"head":{"vars":["relationship","relationship_label","relationship_comment","digital_artifact","digital_artifact_label","digital_artifact_comment"]},"results":{"bindings":[{"relationship":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#analyzes"},"relationship_label":{"type":"literal","value":"analyzes"},"relationship_comment":{"type":"literal","value":"x analyzes y: The subject x break down object y into components or essential features, assessing y by quantitative methods, qualitative methods, or both.  Usually the analysis is done in terms of some model or framework."},"digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#RPCNetworkTraffic"},"digital_artifact_label":{"type":"literal","value":"RPC Network Traffic"},"digital_artifact_comment":{"type":"literal","value":"RPC network traffic is network traffic related to remote procedure calls between network nodes..This includes only network traffic conforming to a standard RPC protocol; not custom protocols."}}]}},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference_CAR-2014-03-001:SMBWriteRequest-NamedPipes_MITRE","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://car.mitre.org/analytics/CAR-2014-03-001/"},"d3f:kb-abstract":"An SMB write can be an indicator of lateral movement, especially when combined with other information such as execution of that written file. Named pipes are a subset of SMB write requests. Named pipes such as msftewds may not be alarming; however others, such as lsarpc, may.\n\nMonitoring SMB write requests still creates some noise, particularly with named pipes. As a result, SMB is now split between writing named pipes and writing other files.","d3f:kb-author":"MITRE","d3f:kb-is-example-of":[{"@id":"d3f:IPCTrafficAnalysis"},{"@id":"d3f:RPCTrafficAnalysis"}],"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2014-03-001: SMB Write Request - NamedPipes","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2014-03-001: SMB Write Request - NamedPipes - MITRE"},{"@id":"d3f:Reference_CAR-2014-03-005:RemotelyLaunchedExecutablesViaServices_MITRE","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://car.mitre.org/analytics/CAR-2014-03-005/"},"d3f:kb-abstract":"There are several ways to cause code to execute on a remote host. One of the most common methods is via the Windows Service Control Manager (SCM), which allows authorized users to remotely create and modify services. Several tools, such as PsExec, use this functionality.\n\nWhen a client remotely communicates with the Service Control Manager, there are two observable behaviors. First, the client connects to the RPC Endpoint Mapper over 135/tcp. This handles authentication, and tells the client what port the endpoint—in this case the SCM—is listening on. Then, the client connects directly to the listening port on services.exe. If the request is to start an existing service with a known command line, the the SCM process will run the corresponding command.\n\nThis compound behavior can be detected by looking for services.exe receiving a network connection and immediately spawning a child process.","d3f:kb-author":"MITRE","d3f:kb-is-example-of":{"@id":"d3f:RPCTrafficAnalysis"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2014-03-005: Remotely Launched Executables via Services","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2014-03-005: Remotely Launched Executables via Services - MITRE"},{"@id":"d3f:Reference_CAR-2014-11-007:RemoteWindowsManagementInstrumentation(WMI)OverRPC_MITRE","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":""},"d3f:kb-abstract":"As described in ATT&CK, an adversary can use Windows Management Instrumentation (WMI) to view or manipulate objects on a remote host. It can be used to remotely edit configuration, start services, query files, and anything that can be done with a WMI class. When remote WMI requests are over RPC (CAR-2014-05-001), it connects to a DCOM interface within the RPC group netsvcs. To detect this activity, a sensor is needed at the network level that can decode RPC traffic or on the host where the communication can be detected more natively, such as Event Tracing for Windows. Using wireshark/tshark decoders, the WMI interfaces can be extracted so that WMI activity over RPC can be detected.\n\nAlthough the description details how to detect remote WMI precisely, a decent estimate has been to look for the string RPCSS within the initial RPC connection on 135/tcp. It returns a superset of this activity, and will trigger on all DCOM-related services running within RPC, which is likely to also be activity that should be detected between hosts. More about RPCSS at : rpcss_dcom_interfaces.html","d3f:kb-author":"MITRE","d3f:kb-is-example-of":{"@id":"d3f:RPCTrafficAnalysis"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2014-11-007: Remote Windows Management Instrumentation (WMI) over RPC","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2014-11-007: Remote Windows Management Instrumentation (WMI) over RPC - MITRE"},{"@id":"d3f:Reference_CAR-2014-12-001:RemotelyLaunchedExecutablesViaWMI_MITRE","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://car.mitre.org/analytics/CAR-2014-12-001/"},"d3f:kb-abstract":"Adversaries can use Windows Management Instrumentation (WMI) to move laterally by launching executables remotely. For adversaries to achieve this, they must open a WMI connection to a remote host. This RPC activity is currently detected by CAR-2014-11-007. After the WMI connection has been initialized, a process can be remotely launched using the command: wmic /node:\"<hostname>\" process call create \"<command line>\", which is detected via CAR-2016-03-002.\n\nThis leaves artifacts at both a network (RPC) and process (command line) level. When wmic.exe (or the schtasks API) is used to remotely create processes, Windows uses RPC (135/tcp) to communicate with the the remote machine.\n\nAfter RPC authenticates, the RPC endpoint mapper opens a high port connection, through which the schtasks Remote Procedure Call is actually implemented. With the right packet decoders, or by looking for certain byte streams in raw data, these functions can be identified.\n\nWhen the command line is executed, it has the parent process of C:\\windows\\system32\\wbem\\WmiPrvSE.exe. This analytic looks for these two events happening in sequence, so that the network connection and target process are output.","d3f:kb-author":"MITRE","d3f:kb-is-example-of":[{"@id":"d3f:ProcessLineageAnalysis"},{"@id":"d3f:RPCTrafficAnalysis"}],"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2014-12-001: Remotely Launched Executables via WMI","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2014-12-001: Remotely Launched Executables via WMI - MITRE"},{"@id":"d3f:Reference_CAR-2015-04-002:RemotelyScheduledTasksViaSchtasks_MITRE","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://car.mitre.org/analytics/CAR-2015-04-002/"},"d3f:kb-abstract":"An adversary can move laterally using the schtasks command to remotely schedule tasks. Although these events can be detected with command line analytics CAR-2013-08-001, it is possible for an adversary to use the API directly, via the Task Scheduler GUI or with a scripting language such as PowerShell. In this cases, an additional source of data becomes necessary to detect adversarial behavior. When scheduled tasks are created remotely, Windows uses RPC (135/tcp) to communicate with the Task Scheduler on the remote machine. Once an RPC connection is established (CAR-2014-05-001), the client communicates with the Scheduled Tasks endpoint, which runs within the service group netsvcs. With packet capture and the right packet decoders or byte-stream based signatures, remote invocations of these functions can be identified.\n\nCertain strings can be identifiers of the schtasks, by looking up the interface UUID of ITaskSchedulerService in different formats\n\n* UUID 86d35949-83c9-4044-b424-db363231fd0c (decoded)\n* Hex 49 59 d3 86 c9 83 44 40 b4 24 db 36 32 31 fd 0c (raw)\n* ASCII IYD@$621 (printable bytes only)\n\nThis identifier is present three times during the RPC request phase. Any sensor that has access to the byte code as raw, decoded, or ASCII could implement this analytic.","d3f:kb-author":"MITRE","d3f:kb-is-example-of":{"@id":"d3f:RPCTrafficAnalysis"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2015-04-002: Remotely Scheduled Tasks via Schtasks","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2015-04-002: Remotely Scheduled Tasks via Schtasks - MITRE"},{"@id":"d3f:Reference_CAR-2016-03-002:CreateRemoteProcessViaWMIC_MITRE_Other","@type":["d3f:ExternalKnowledgeBase","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://car.mitre.org/analytics/CAR-2016-03-002/"},"d3f:kb-abstract":"Adversaries may use Windows Management Instrumentation (WMI) to move laterally, by launching executables remotely.The analytic CAR-2014-12-001 describes how to detect these processes with network traffic monitoring and process monitoring on the target host. However, if the command line utility wmic.exe is used on the source host, then it can additionally be detected on an analytic. The command line on the source host is constructed into something like wmic.exe /node:\"\\<hostname\\>\" process call create \"\\<command line\\>\". It is possible to also connect via IP address, in which case the string \"\\<hostname\\>\" would instead look like IP Address.\n\nAlthough this analytic was created after CAR-2014-12-001, it is a much simpler (although more limited) approach. Processes can be created remotely via WMI in a few other ways, such as more direct API access or the built-in utility PowerShell.","d3f:kb-author":"MITRE","d3f:kb-is-example-of":[{"@id":"d3f:ProcessSpawnAnalysis"},{"@id":"d3f:RPCTrafficAnalysis"}],"d3f:kb-mitre-analysis":"","d3f:kb-organization":"MITRE","d3f:kb-reference-title":"CAR-2016-03-002: Create Remote Process via WMIC","d3f:reference-type-label":"External Knowledge Base","rdfs:label":"Reference - CAR-2016-03-002: Create Remote Process via WMIC - MITRE"},{"@id":"d3f:Reference_RPCCallInterception_CrowdstrikeInc","@type":["d3f:PatentReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://patents.google.com/patent/US20150163109"},"d3f:kb-abstract":"A service proxy is described herein. The service proxy is configured to act as an intermediary between a client and a service. The service proxy may observe communications, modify communications, log communications, or the like, particularly so as to enhance the security and reliability of the host device. In some implementations, the service proxy may cooperate with an operating system to take over a named port object. In some implementations, the service proxy may receive messages as an intermediary between the client and the server. In some implementations, the service proxy may attach to a shared memory to intercept communications. In some implementations, the service proxy may be injected into a client process to appear to be the client itself.","d3f:kb-author":"Ion-Alexandru Ionescu","d3f:kb-is-example-of":{"@id":"d3f:RPCTrafficAnalysis"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"Crowdstrike Inc","d3f:kb-reference-title":"RPC call interception","d3f:reference-type-label":"Patent","rdfs:label":"Reference - RPC call interception - Crowdstrike Inc"}]},"references_meta":{"External Knowledge Base":6,"Patent":1}}