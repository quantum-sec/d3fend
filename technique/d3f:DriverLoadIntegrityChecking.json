{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","kb-article":"d3f:kb-article","definition":"d3f:definition","kb-reference":{"@id":"d3f:kb-reference","@container":"@set"}},"@graph":[{"@id":"_:b0"},{"@id":"d3f:DriverLoadIntegrityChecking","@type":["d3f:PlatformHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:authenticates":{"@id":"d3f:HardwareDriver"},"d3f:d3fend-id":"D3-DLIC","definition":"Ensuring the integrity of drivers loaded during initialization of the operating system.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How it works\nThis technique can be accomplished in a number of ways:\n\n* A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first.\n\n* Kernel components can be signed by a certificate obtained by a third party to verify the source of the component and whether it has been modified. When signed, the component will include a signature block implemented as a hash value of the component header and can also include a certificate chain. The signature and certificate data are typically added before the kernel component is distributed to the public. \n\n\n## Considerations\n\n* The private keys to sign certificates as reputable companies have been stolen in the past -- in cases such as where certificates from Adobe, Realtek, and JMicron have been used to sign malicious executables. (Source: https://resources.infosecinstitute.com/cybercrime-exploits-digital-certificates/#gref)\n\n* Trusted Root Certificate Authorities have been compromised, yielding the ability to use the compromised keys to generate certificates with an arbitrary company name.\n\n* It may not be difficult for an attacker to start an organization which can obtain a signed certificate.\n\n* A root certificate authority (CA) whose certificate is trusted in the verification logic could generate incorrect certificates, if they are lax or have ulterior motives.","kb-reference":[{"@id":"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc"},{"@id":"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC"}],"rdfs:label":"Driver Load Integrity Checking","rdfs:subClassOf":[{"@id":"d3f:PlatformHardening"},{"@id":"_:b0"}]},{"@id":"d3f:Harden"},{"@id":"d3f:HardwareDriver"},{"@id":"d3f:PlatformHardening"},{"@id":"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc"},{"@id":"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC"}],"_:b0":{"@id":"_:b0"},"d3f:DriverLoadIntegrityChecking":{"@id":"d3f:DriverLoadIntegrityChecking","@type":["d3f:PlatformHardening","http://www.w3.org/2002/07/owl#NamedIndividual","http://www.w3.org/2002/07/owl#Class"],"d3f:authenticates":{"@id":"d3f:HardwareDriver"},"d3f:d3fend-id":"D3-DLIC","definition":"Ensuring the integrity of drivers loaded during initialization of the operating system.","d3f:enables":{"@id":"d3f:Harden"},"kb-article":"## How it works\nThis technique can be accomplished in a number of ways:\n\n* A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first.\n\n* Kernel components can be signed by a certificate obtained by a third party to verify the source of the component and whether it has been modified. When signed, the component will include a signature block implemented as a hash value of the component header and can also include a certificate chain. The signature and certificate data are typically added before the kernel component is distributed to the public. \n\n\n## Considerations\n\n* The private keys to sign certificates as reputable companies have been stolen in the past -- in cases such as where certificates from Adobe, Realtek, and JMicron have been used to sign malicious executables. (Source: https://resources.infosecinstitute.com/cybercrime-exploits-digital-certificates/#gref)\n\n* Trusted Root Certificate Authorities have been compromised, yielding the ability to use the compromised keys to generate certificates with an arbitrary company name.\n\n* It may not be difficult for an attacker to start an organization which can obtain a signed certificate.\n\n* A root certificate authority (CA) whose certificate is trusted in the verification logic could generate incorrect certificates, if they are lax or have ulterior motives.","kb-reference":[{"@id":"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc"},{"@id":"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC"}],"rdfs:label":"Driver Load Integrity Checking","rdfs:subClassOf":[{"@id":"d3f:PlatformHardening"},{"@id":"_:b0"}]},"d3f:Harden":{"@id":"d3f:Harden"},"d3f:HardwareDriver":{"@id":"d3f:HardwareDriver"},"d3f:PlatformHardening":{"@id":"d3f:PlatformHardening"},"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc":{"@id":"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc"},"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC":{"@id":"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC"},"name":"d3f:DriverLoadIntegrityChecking","related_offensive_matrix":{},"digital_artifacts":{"head":{"vars":["relationship","relationship_label","relationship_comment","digital_artifact","digital_artifact_label","digital_artifact_comment"]},"results":{"bindings":[{"relationship":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#authenticates"},"relationship_label":{"type":"literal","value":"authenticates"},"relationship_comment":{"type":"literal","value":"x authenticates y: The subject x establishes the authenticity of some y. This relation indicates an authentication event has occurred."},"digital_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#HardwareDriver"},"digital_artifact_label":{"type":"literal","value":"Hardware Driver"},"digital_artifact_comment":{"type":"literal","value":"In computing, a device driver (commonly referred to simply as a driver) is a computer program that operates or controls a particular type of device that is attached to a computer. A driver provides a software interface to hardware devices, enabling operating systems and other computer programs to access hardware functions without needing to know precise details of the hardware being used. A driver communicates with the device through the computer bus or communications subsystem to which the hardware connects. When a calling program invokes a routine in the driver, the driver issues commands to the device. Once the device sends data back to the driver, the driver may invoke routines in the original calling program. Drivers are hardware dependent and operating-system-specific. They usually provide the interrupt handling required for any necessary asynchronous time-dependent hardware interface."}}]}},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference_IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc","@type":["d3f:PatentReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://patents.google.com/patent/US20170061127A1"},"d3f:kb-abstract":"Techniques utilizing library and pre-boot components to ensure that a driver associated with a kernel-mode component is initialized before other drivers during a boot phase are described herein. The library component is processed during a boot phase; the pre-boot component, which may be an alternative to the library component, is processed during a pre-boot phase. By ensuring that the driver is the first driver initialized, the components enable the driver to launch the kernel-mode component before other drivers are initialized. The library component may also determine whether another driver is to be initialized before the kernel-mode component driver, may ensure that kernel-mode component driver is initialized first, and may alert the kernel-mode component. Also, the library component may retrieve information that is to be deleted by the operating system before initialization of drivers and may provide that information to the kernel-mode component.","d3f:kb-author":"Ion-Alexandru Ionescu","d3f:kb-is-example-of":{"@id":"d3f:DriverLoadIntegrityChecking"},"d3f:kb-mitre-analysis":"To compromise software or to gain control of a host device, a security exploit can modify driver initialization order used by an operating system and place a driver associated with the security exploit first in a list of drivers initialized by the operating system. \n\nThis patent describes ensuring that a driver associated with the agent is initialized first. To ensure the driver is initialized first, a dependent DLL associated with the driver is configured to be processed before other dependent DLLs. The dependent DLL can be configured to be processed first by various methods, for example if processing is done in alphabetical order, changing its name to be processed first. The dependent DLL, once processed, executes a number of operations to ensure the driver associated with the agent is initialized first. Furthermore, if the initialization order is modified, an alert is provided to the kernel-mode component that notifies the kernel-mode component it was not first and the order had to be altered. It can then take additional actions such as additional monitoring or remediation.","d3f:kb-organization":"Crowdstrike Inc","d3f:kb-reference-title":"Integrity assurance through early loading in the boot phase","d3f:reference-type-label":"Patent","rdfs:label":"Reference - Integrity assurance through early loading in the boot phase - Crowdstrike Inc"},{"@id":"d3f:Reference_ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC","@type":["d3f:PatentReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://patents.google.com/patent/US20060242406A1"},"d3f:kb-abstract":"A method of establishing a protected environment within a computing device including validating a kernel component loaded into a kernel of the computing device, establishing a security state for the kernel based on the validation, creating a secure process and loading a software component into the secure process, periodically checking the security state of the kernel, and notifying the secure process when the security state of the kernel has changed.","d3f:kb-author":"Sumedh Barde, Jonathan Schwartz, Reid Kuhn, Alexandre Grigorovitch, Kirt Debique, Chadd Knowlton, James Alkove, Geoffrey Dunbar, Michael Grier, Ming Ma, Chaitanya Upadhyay, Adil Sherwani, Arun Kishan","d3f:kb-is-example-of":{"@id":"d3f:DriverLoadIntegrityChecking"},"d3f:kb-mitre-analysis":"","d3f:kb-organization":"Microsoft Technology Licensing LLC","d3f:kb-reference-title":"Protected computing environment","d3f:reference-type-label":"Patent","rdfs:label":"Reference - Protected computing environment - Microsoft Technology Licensing LLC"}]},"references_meta":{"Patent":2}}